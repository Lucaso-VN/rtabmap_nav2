### ekf config file ###
ekf_filter_node:
  ros__parameters:
    use_sim_time: true
    # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
    # computation until it receives at least one message from one of the inputs. It will then run continuously at the
    # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
    frequency: 20.0

    # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
    # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
    # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
    # by, for example, an IMU. Defaults to false if unspecified.
    two_d_mode: true
    publish_tf: false
    map_frame_id: map              # Defaults to "map" if unspecified
    odom_frame: odom            # Defaults to "odom" if unspecified
    base_link_frame: base_footprint  # Defaults to "base_link" if unspecified
    world_frame: map           # Defaults to the value of odom_frame if unspecified
    odom0: odom
    pose0: rtabmap/localization_pose

    # The filter accepts an arbitrary number of inputs from each input message type (nav_msgs/Odometry,
    # geometry_msgs/PoseWithCovarianceStamped, geometry_msgs/TwistWithCovarianceStamped,
    # sensor_msgs/Imu). To add an input, simply append the next number in the sequence to its "base" name, e.g., odom0,
    # odom1, twist0, twist1, imu0, imu1, imu2, etc. The value should be the topic name. These parameters obviously have no
    # default values, and must be specified.

    odom0: /diff_cont/odom
    odom0_config : [true, true, false,     # position (x, y, z), easy to drift so don't use it
                  false, false, true,      # orientation (roll, pitch, yaw)
                  false, false, false,       # linear velocity (vx, vy, vz)
                  false, false, false,      # angular velocity (vroll, vpitch, vyaw)
                  false, false, false]     # ax, ay, az
    # [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
    # report their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
    # arrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
    # measured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
    # always feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
    # data is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
    # integrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
    # for twist measurements has no effect.
    odom0_differential: true
    pose0_differential: false
    
    pose0_config : [true, true, false,
                    false, false, true,
                    false, false, false,
                    false, false, false,
                    false, false, false]
    
    odom0_relative: true
    pose0_relative: false

    odom0_queue_size: 5
    pose0_queue_size: 5